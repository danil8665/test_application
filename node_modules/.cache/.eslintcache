[{"/Users/danil8665/Desktop/test exercise/myapp/src/index.tsx":"1","/Users/danil8665/Desktop/test exercise/myapp/src/App.tsx":"2","/Users/danil8665/Desktop/test exercise/myapp/src/components/Home.tsx":"3","/Users/danil8665/Desktop/test exercise/myapp/src/redux/issues.ts":"4","/Users/danil8665/Desktop/test exercise/myapp/src/redux/hooks.ts":"5"},{"size":517,"mtime":1682753075902,"results":"6","hashOfConfig":"7"},{"size":146,"mtime":1682753069378,"results":"8","hashOfConfig":"7"},{"size":6937,"mtime":1682962976441,"results":"9","hashOfConfig":"7"},{"size":512,"mtime":1682961686182,"results":"10","hashOfConfig":"7"},{"size":378,"mtime":1682501011504,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1o77dqw",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/danil8665/Desktop/test exercise/myapp/src/index.tsx",[],["25","26"],"/Users/danil8665/Desktop/test exercise/myapp/src/App.tsx",[],"/Users/danil8665/Desktop/test exercise/myapp/src/components/Home.tsx",["27","28","29"],"import React, { useState } from 'react';\nimport { Breadcrumb, Button, Input, Layout, Space, theme } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport Link from 'antd/es/typography/Link';\nimport * as dotenv from 'dotenv'\nimport issuesSlice, { issues } from '../redux/issues';\ndotenv.config()\n\nconst { Header, Content, Footer } = Layout;\n\ntype DataType = {\n  state: string;\n  assignee?: null | string;\n}\n\ntype ColumnType = {\n  id: string;\n  title: string;\n};\n\ntype IssueRequestType = {\n  id: number;\n  number: number;\n  column: string;\n  title: string;\n  state: string;\n  assignee: string | null;\n}\n\ntype IssueType = {\n  id: number;\n  number: number;\n  column: string;\n  title: string;\n}\n\nconst Home = () => {\n  const [text, setText] = useState<string>('');\n  const [owner, setOwner] = useState<string>('');\n  const [repo, setRepo] = useState<string>('');\n  const [ownerLink, setOwnerLink] = useState<string>('');\n  const [repoLink, setRepoLink] = useState<string>('');\n  const [allIssues, setAllIssues] = useState<IssueType[]>([]);\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n\n  const accessToken = process.env.REACT_APP_ACCESS_TOKEN\n\n  const dispatch = useDispatch()\n\n  const columns: ColumnType[] = [\n    { id: 'ToDo', title: 'ToDo' },\n    { id: 'InProgress', title: 'In Progress' },\n    { id: 'Done', title: 'Done' },\n  ];\n\n  const fetchApi = async (issueNumber:number, data:DataType) => {\n    const url = `https://api.github.com/repos/${owner}/${repo}/issues/`;\n    const response = await fetch(url + issueNumber, {\n      method: \"PATCH\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          ...data\n        })\n      });\n      if (!response.ok) {\n        console.error(response.statusText);\n        return;\n      }\n  }\n\n  const getIssues = async (repoUrl: string) => {\n    setText('');\n    const urlParts = repoUrl.split('/');\n    const owner = urlParts[3];\n    const repo = urlParts[4];\n    setOwner(owner);\n    setRepo(repo);\n    const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/issues?state=all`);\n    const issues = await response.json();\n    const allIssues = issues.map((item:IssueRequestType, index:number) => {\n      return {id: index, title: item.title, number: item.number, column: item.state === \"open\" && !!!item.assignee? \"ToDo\": item.state === \"open\" && !!item.assignee === true? \"InProgress\": \"Done\"}\n    })\n    dispatch(issuesSlice.actions.issues(allIssues))\n    setAllIssues(allIssues)\n    const linkForOwner = issues[0].user.html_url\n    setOwnerLink(linkForOwner)\n    const linkForRepo = text;\n    setRepoLink(linkForRepo)\n    return issues;\n  }\n\n  const [draggedItem, setDraggedItem] = useState<IssueType | null>(null);\n\n  const handleDragStart = (e: React.DragEvent<HTMLDivElement>, item: IssueType) => {\n    setIsDragging(true);\n    setDraggedItem(item);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setDragImage(e.currentTarget, 20, 20);\n  };\n  \nconst handleDragOver = async (e: React.DragEvent<HTMLDivElement>, columnId: string, index: number) => {\n  e.preventDefault();\n  if (draggedItem === null) {\n    return;\n  }\n  if (draggedItem.column === columnId) {\n    const updatedItems = [...allIssues];\n    updatedItems.splice(updatedItems.indexOf(draggedItem), 1);\n    updatedItems.splice(index, 0, draggedItem);\n    setAllIssues(updatedItems); \n  } \n  else {  \n    const updatedItems = allIssues.map((item) =>\n      item.id === draggedItem.id ? { ...item, column: columnId } : item\n    );\n    const columnItems = updatedItems.filter(item => item.column === columnId);\n      if (columnItems.length === 0) {\n        updatedItems.push({ ...draggedItem, column: columnId });\n      }\n      setAllIssues(updatedItems);\n  }\n  };\n\n    const handleDrop = async (e: React.DragEvent<HTMLDivElement>, columnId: string) => {\n      e.preventDefault();\n      if (draggedItem === null) {\n        return;\n      }\n    \n      const updatedItems = allIssues.map((item) =>\n        item.id === draggedItem.id ? { ...item, column: columnId } : item\n      );\n      const columnItems = updatedItems.filter(item => item.column === columnId);\n      if (columnItems.length === 0) {\n        updatedItems.push({ ...draggedItem, column: columnId });\n      }\n      if (draggedItem.column && columnId === \"Done\") {\n        fetchApi(draggedItem.number, {\n          state: \"closed\"\n        })\n        }\n        if (draggedItem.column && columnId === \"ToDo\") {\n          fetchApi(draggedItem.number, {\n            state: \"open\",\n            assignee: null\n          })\n          }\n          if (draggedItem.column && columnId === \"InProgress\") {\n            fetchApi(draggedItem.number, {\n              state: \"open\",\n              assignee: owner\n            })\n            }\n      setAllIssues(updatedItems);\n    };\n\n  return (\n    <Layout>\n    <Header>\n      <div className='logo'>\n        <h1>GitHub Kanban Board</h1>\n      </div>\n    </Header>\n    <Content className=\"site-layout\" style={{ padding: '0 50px' }}>\n      <Breadcrumb style={{ margin: '16px 0' }}>\n        <Breadcrumb.Item><Link href={ownerLink}>{owner}</Link></Breadcrumb.Item>\n        <Breadcrumb.Item><Link href={repoLink}>{repo}</Link></Breadcrumb.Item>\n      </Breadcrumb>\n      <div className='layout'>\n      <Space.Compact style={{ width: '100%' }}>\n      <Input \n        autoFocus\n        id='link'\n        type={\"text\"}\n        value={text}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n        defaultValue=\"Combine input and button\" \n        placeholder='Enter the link to the repo'\n      />\n      <Button onClick={() => getIssues(text)} type=\"primary\">Load issues</Button>\n    </Space.Compact>\n    <br/>\n    <br/>\n    <div className=\"kanban-board\">\n      {columns.map((column, index) => (\n        <div key={column.id} className=\"kanban-column\">\n          <h2>{column.title}</h2>\n          <div\n            className=\"kanban-dropzone\"\n            onDragOver={(e) => handleDragOver(e, column.id, index)}\n            onDrop={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n          >\n            {allIssues\n              .filter((item:IssueType) => item.column === column.id)\n              .map((item:IssueType) => (\n                <div\n                  key={item.id}\n                  className=\"kanban-item\"\n                  draggable\n                  onDragStart={(e) => handleDragStart(e, item)}\n                  onDragEnd={() => setDraggedItem(null)}\n                  onDrop={(e) => handleDrop(e, item.column)}\n                >\n                  {item.title}\n                </div>\n              ))}\n          </div>\n        </div>\n      ))}\n    </div>\n    </div>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>Ant Design Â©2023 Created by Filatov Danylo</Footer>\n  </Layout>\n\n  );\n}\nexport default Home;\n","/Users/danil8665/Desktop/test exercise/myapp/src/redux/issues.ts",[],"/Users/danil8665/Desktop/test exercise/myapp/src/redux/hooks.ts",[],["30","31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":2,"column":52,"nodeType":"38","messageId":"39","endLine":2,"endColumn":57},{"ruleId":"36","severity":1,"message":"40","line":6,"column":23,"nodeType":"38","messageId":"39","endLine":6,"endColumn":29},{"ruleId":"36","severity":1,"message":"41","line":44,"column":10,"nodeType":"38","messageId":"39","endLine":44,"endColumn":20},{"ruleId":"32","replacedBy":"42"},{"ruleId":"34","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"@typescript-eslint/no-unused-vars","'theme' is defined but never used.","Identifier","unusedVar","'issues' is defined but never used.","'isDragging' is assigned a value but never used.",["44"],["45"],"no-global-assign","no-unsafe-negation"]